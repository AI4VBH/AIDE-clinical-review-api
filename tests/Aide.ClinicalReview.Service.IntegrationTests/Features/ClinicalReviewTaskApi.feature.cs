// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Aide.ClinicalReview.Service.IntegrationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ClinicalReviewTaskApi")]
    public partial class ClinicalReviewTaskApiFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ClinicalReviewTaskApi.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ClinicalReviewTaskApi", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review Tasks are returned when there are Clinical Review Tasks for the r" +
            "ole")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json", "roles", "clinician", null)]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json", "roles", "clinician,other", null)]
        public virtual void ClinicalReviewTasksAreReturnedWhenThereAreClinicalReviewTasksForTheRole(string clinicalReviewTasks, string name, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ClinicalReview_TaskApi"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clinicalReviewTasks", clinicalReviewTasks);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review Tasks are returned when there are Clinical Review Tasks for the r" +
                    "ole", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
        testRunner.Given(string.Format("I have Clinical Review Tasks \'{0}\' in Mongo", clinicalReviewTasks), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
        testRunner.When(string.Format("I send a request to get Clinical Review Tasks with parameter {0} and {1}", name, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
        testRunner.Then("I can see correct Clinical Review Tasks are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review Tasks are not returned when there are no Clinical Review Tasks fo" +
            "r the role")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTasksAreNotReturnedWhenThereAreNoClinicalReviewTasksForTheRole()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review Tasks are not returned when there are no Clinical Review Tasks fo" +
                    "r the role", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
        testRunner.When("I send a request to get Clinical Review Tasks with parameter roles and other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
        testRunner.Then("I can see no Clinical Review Tasks are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("No Clinical Review Tasks are returned when the DB is empty")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void NoClinicalReviewTasksAreReturnedWhenTheDBIsEmpty()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("No Clinical Review Tasks are returned when the DB is empty", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
        testRunner.Given("I have no Clinical Review Tasks in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
        testRunner.When("I send a request to get Clinical Review Tasks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
        testRunner.Then("I can see no Clinical Review Tasks are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Correct Clinical Review Tasks are returned based on search parameters")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "patientName", "Jane", "ClinicalReviewTask_Search.json", null)]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "patientName", "bloggs", "ClinicalReviewTask.json,ClinicalReviewTask_Search.json", null)]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "patientId", "1234567", "ClinicalReviewTask.json", null)]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "patientId", "987654", "ClinicalReviewTask_Search.json", null)]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "applicationName", "application", "ClinicalReviewTask.json,ClinicalReviewTask_Search.json", null)]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "applicationName", "application_1", "ClinicalReviewTask.json", null)]
        public virtual void CorrectClinicalReviewTasksAreReturnedBasedOnSearchParameters(string clinicalReviewTasks, string name, string value, string clinicalReviewTaskReturned, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ClinicalReview_TaskApi"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clinicalReviewTasks", clinicalReviewTasks);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("clinicalReviewTaskReturned", clinicalReviewTaskReturned);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Correct Clinical Review Tasks are returned based on search parameters", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
        testRunner.Given(string.Format("I have Clinical Review Tasks \'{0}\' in Mongo", clinicalReviewTasks), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
        testRunner.When(string.Format("I send a request to get Clinical Review Tasks with parameter {0} and {1}", name, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
        testRunner.Then(string.Format("I can see Clinical Review Tasks \'{0}\' are returned", clinicalReviewTaskReturned), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review Tasks are not returned based on search parameters")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "patientName", "George", null)]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "patientId", "999999", null)]
        [NUnit.Framework.TestCaseAttribute("ClinicalReviewTask.json,ClinicalReviewTask_Search.json", "applicationName", "stroke", null)]
        public virtual void ClinicalReviewTasksAreNotReturnedBasedOnSearchParameters(string clinicalReviewTasks, string name, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ClinicalReview_TaskApi"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("clinicalReviewTasks", clinicalReviewTasks);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review Tasks are not returned based on search parameters", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
        testRunner.Given(string.Format("I have Clinical Review Tasks \'{0}\' in Mongo", clinicalReviewTasks), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
        testRunner.When(string.Format("I send a request to get Clinical Review Tasks with parameter {0} and {1}", name, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
        testRunner.Then("I can see no Clinical Review Tasks are returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review service returns bad request when roles are not added")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewServiceReturnsBadRequestWhenRolesAreNotAdded()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review service returns bad request when roles are not added", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
        testRunner.When("I send a request to get Clinical Review Tasks with no role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
        testRunner.Then("Clinical Review Service Returns Bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review task can be approved and request generates a Task Callback")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTaskCanBeApprovedAndRequestGeneratesATaskCallback()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review task can be approved and request generates a Task Callback", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
        testRunner.When("I send a request to edit clinical review task with \'ClinicalReviewTask_Accept.jso" +
                        "n\' and execution Id \'8facc52c-8b43-45ae-8399-8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
        testRunner.Then("clinical review task has been updated in Mongo \'8facc52c-8b43-45ae-8399-8681c719e" +
                        "c2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
        testRunner.And("I can see a Task Callback is generated and execution Id \'8facc52c-8b43-45ae-8399-" +
                        "8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review task can be rejected and request generates a Task Callback")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTaskCanBeRejectedAndRequestGeneratesATaskCallback()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review task can be rejected and request generates a Task Callback", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
        testRunner.When("I send a request to edit clinical review task with \'ClinicalReviewTask_Reject.jso" +
                        "n\' and execution Id \'8facc52c-8b43-45ae-8399-8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
        testRunner.Then("clinical review task has been updated in Mongo \'8facc52c-8b43-45ae-8399-8681c719e" +
                        "c2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
        testRunner.And("I can see a Task Callback is generated and execution Id \'8facc52c-8b43-45ae-8399-" +
                        "8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review task cannot be approved when execution Id is invalid")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTaskCannotBeApprovedWhenExecutionIdIsInvalid()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review task cannot be approved when execution Id is invalid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
        testRunner.When("I send a request to edit clinical review task with \'ClinicalReviewTask_Accept.jso" +
                        "n\' and execution Id \'8facc52c-8b43-45ae-8399-8681c719\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
        testRunner.Then("Clinical Review Service Returns Bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review task cannot be approved when request body is invalid")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTaskCannotBeApprovedWhenRequestBodyIsInvalid()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review task cannot be approved when request body is invalid", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 94
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 95
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
        testRunner.When("I send a request to edit clinical review task with \'ClinicalReviewTask_InvalidFie" +
                        "lds.json\' and execution Id \'8facc52c-8b43-45ae-8399-8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
        testRunner.Then("clinical review task has been updated in Mongo \'8facc52c-8b43-45ae-8399-8681c719e" +
                        "c2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
        testRunner.Then("Clinical Review Service Returns Bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review task cannot be rejected when reject reason is missing")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTaskCannotBeRejectedWhenRejectReasonIsMissing()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review task cannot be rejected when reject reason is missing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 101
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
        testRunner.When("I send a request to edit clinical review task with \'ClinicalReviewTask_RejectNoRe" +
                        "ason.json\' and execution Id \'8facc52c-8b43-45ae-8399-8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
        testRunner.Then("Clinical Review Service Returns Bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review task cannot be approved or rejected when review is not found")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTaskCannotBeApprovedOrRejectedWhenReviewIsNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review task cannot be approved or rejected when review is not found", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 107
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 108
        testRunner.Given("I have no Clinical Review Tasks in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
        testRunner.When("I send a request to edit clinical review task with \'ClinicalReviewTask_Reject.jso" +
                        "n\' and execution Id \'8facc52c-8b43-45ae-8399-8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 110
        testRunner.Then("Clinical Review service Returns Not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review task cannot be approved or rejected when already reviewed in the " +
            "DB")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTaskCannotBeApprovedOrRejectedWhenAlreadyReviewedInTheDB()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review task cannot be approved or rejected when already reviewed in the " +
                    "DB", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 113
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 114
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask_Reviewed.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 115
        testRunner.When("I send a request to edit clinical review task with \'ClinicalReviewTask_Reject.jso" +
                        "n\' and execution Id \'8facc52c-8b43-45ae-8399-8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
        testRunner.Then("Clinical Review Service Returns Bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Clinical Review task cannot be approved when role does not match")]
        [NUnit.Framework.CategoryAttribute("ClinicalReview_TaskApi")]
        public virtual void ClinicalReviewTaskCannotBeApprovedWhenRoleDoesNotMatch()
        {
            string[] tagsOfScenario = new string[] {
                    "ClinicalReview_TaskApi"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clinical Review task cannot be approved when role does not match", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 120
        testRunner.Given("I have Clinical Review Tasks \'ClinicalReviewTask.json\' in Mongo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 121
        testRunner.When("I send a request to edit clinical review task with \'ClinicalReviewTask_IncorrectR" +
                        "ole.json\' and execution Id \'8facc52c-8b43-45ae-8399-8681c719ec2c\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 122
        testRunner.Then("Clinical Review service Returns forbidden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
